import { expect, test } from 'bun:test'
import { AnimalShelter } from './6_AnimalShelter'

const s = new AnimalShelter()

test('operation', () => {
  s.enqueue('dog')
  s.enqueue('dog')
  s.enqueue('cat')
  expect(s.length).toBe(3)
  expect(s.dogCount).toBe(2)
  expect(s.catCount).toBe(1)

  expect(s.dequeueAny()?.species).toBe('dog')
  expect(s.length).toBe(2)
  expect(s.dogCount).toBe(1)
  expect(s.dequeueAny()?.species).toBe('dog')
  expect(s.length).toBe(1)
  expect(s.dogCount).toBe(0)
  expect(s.dequeueAny()?.species).toBe('cat')
  expect(s.catCount).toBe(0)
  expect(s.length).toBe(0)
  expect(s.dequeueAny()).toBe(undefined)
  expect(s.length).toBe(0)
  expect(s.dogCount).toBe(0)
  expect(s.catCount).toBe(0)

  s.enqueue('dog')
  s.enqueue('dog')
  s.enqueue('cat')
  s.enqueue('cat')
  expect(s.length).toBe(4)
  expect(s.dogCount).toBe(2)
  expect(s.catCount).toBe(2)

  expect(s.dequeueDog()?.species).toBe('dog')
  expect(s.length).toBe(3)
  expect(s.dogCount).toBe(1)
  expect(s.catCount).toBe(2)
  expect(s.dequeueCat()?.species).toBe('cat')
  expect(s.length).toBe(2)
  expect(s.dogCount).toBe(1)
  expect(s.catCount).toBe(1)
  expect(s.dequeueDog()?.species).toBe('dog')
  expect(s.length).toBe(1)
  expect(s.dogCount).toBe(0)
  expect(s.catCount).toBe(1)
  expect(s.dequeueCat()?.species).toBe('cat')
  expect(s.length).toBe(0)
  expect(s.dogCount).toBe(0)
  expect(s.catCount).toBe(0)

  s.print()
})
